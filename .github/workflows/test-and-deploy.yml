name: Test and Deploy
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_app_changes: ${{ steps.check-changes.outputs.has_app_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to compare changes

      - name: Check for app code changes
        id: check-changes
        run: |
          # Check for changes in app-related directories and files
          # For pull requests, compare with the base branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD 2>/dev/null || echo "")
          else
            # For pushes, compare with the previous commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          fi

          # Define app code patterns to check (using proper regex patterns for grep)
          APP_PATTERNS=(
            "^src/"
            "^package\.json$"
            "^package-lock\.json$"
            "^pnpm-lock\.yaml$"
            "^bun\.lockb$"
            "^svelte\.config\.js$"
            "^vite\.config\.ts$"
            "^tsconfig\.json$"
            "^postcss\.config\.js$"
            "^tailwind\.config\.js$"
            "^app\.html$"
            "^app\.css$"
            "^tests/"
            "^playwright\.config\.ts$"
          )

          # Check if any changed files match our app patterns
          HAS_APP_CHANGES=false

          if [ -n "$CHANGED_FILES" ]; then
            for pattern in "${APP_PATTERNS[@]}"; do
              if echo "$CHANGED_FILES" | grep -E "$pattern" > /dev/null; then
                HAS_APP_CHANGES=true
                break
              fi
            done
          else
            # If we can't determine changes (first run), run tests anyway
            HAS_APP_CHANGES=true
          fi

          echo "has_app_changes=$HAS_APP_CHANGES" >> $GITHUB_OUTPUT
          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo "Has app changes: $HAS_APP_CHANGES"

  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: check-changes
    steps:
      - uses: actions/checkout@v4
        if: needs.check-changes.outputs.has_app_changes == 'true'

      - uses: actions/setup-node@v4
        if: needs.check-changes.outputs.has_app_changes == 'true'
        with:
          node-version: lts/*

      - name: Setup Bun
        if: needs.check-changes.outputs.has_app_changes == 'true'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies with bun
        if: needs.check-changes.outputs.has_app_changes == 'true'
        run: bun install

      - name: Install Playwright Browsers
        if: needs.check-changes.outputs.has_app_changes == 'true'
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        if: needs.check-changes.outputs.has_app_changes == 'true'
        run: npx playwright test

      - name: Publish Test Report
        if: needs.check-changes.outputs.has_app_changes == 'true' && always()
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: './ctrf/*.json'

      - name: Skip tests
        if: needs.check-changes.outputs.has_app_changes == 'false'
        run: |
          echo "No changes detected in app code. Skipping tests."
          echo "This test run was skipped because no relevant changes were found in:"
          echo "- src/ directory"
          echo "- package.json and lock files"
          echo "- configuration files (svelte.config.js, vite.config.ts, etc.)"
          echo "- tests/ directory"
          echo "- playwright.config.ts"
          echo "result=skipped" >> $GITHUB_OUTPUT


  deploy:
    runs-on: ubuntu-latest
    needs: [check-changes, test]
    permissions:
      contents: read
      deployments: write
    name: Build and deploy
    # Only deploy on test success and not skipped
    if: needs.test.result == 'success' && needs.check-changes.outputs.has_app_changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          always-auth: false

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'
          run_install: false

      - name: Set pnpm store
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('./package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies and build
        run: |
          pnpm install --no-frozen-lockfile
          pnpm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: 'svelte-form-builder'
          directory: '.svelte-kit/cloudflare' 